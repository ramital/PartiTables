using Microsoft.Extensions.DependencyInjection;
using PartiTables;
using PartiTables.Interfaces;

namespace PartiSample.Demos;

/// <summary>
/// DEMO 1: Simple Fluent API
/// 
/// Shows: Low-level API without entity models
/// Best for: Quick prototyping, simple key-value scenarios
/// 
/// Key Concepts:
/// - Direct entity creation with PartitionEntity.Create()
/// - Manual RowKey construction
/// - Basic CRUD operations
/// - Query by prefix pattern
/// </summary>
public static class SimpleFluentDemo
{
    public static async Task RunAsync(IServiceProvider sp)
    {
        Console.WriteLine("=== DEMO 1: Simple Fluent API ===");
        Console.WriteLine("Low-level operations without entity models\n");

        var client = sp.GetRequiredService<IPartitionClient>();
        var tenantId = "clinic-001";
        var patientId = "patient-123";

        // ???????????????????????????????????????????????????????????
        // CREATE: Build entities manually
        // ???????????????????????????????????????????????????????????
        Console.WriteLine("? Creating patient record...");
        
        var patient = PartitionEntity.Create(tenantId, $"{patientId}-meta")
            .Set("FirstName", "John")
            .Set("LastName", "Doe")
            .Set("Email", "john.doe@example.com")
            .Set("Status", "Active");

        await client.UpsertAsync(patient);
        Console.WriteLine("  ? Patient created\n");

        // ???????????????????????????????????????????????????????????
        // READ: Fetch by exact RowKey
        // ???????????????????????????????????????????????????????????
        Console.WriteLine("? Reading patient...");
        
        var found = await client.TryGetAsync(tenantId, $"{patientId}-meta");
        if (found != null)
        {
            Console.WriteLine($"  ? Found: {found.GetString("FirstName")} {found.GetString("LastName")}");
            Console.WriteLine($"    Email: {found.GetString("Email")}\n");
        }

        // ???????????????????????????????????????????????????????????
        // CREATE MORE: Add related records
        // ???????????????????????????????????????????????????????????
        Console.WriteLine("? Adding consent record...");
        
        var consent = PartitionEntity.Create(tenantId, $"{patientId}-consent-c001-v1")
            .Set("Type", "DataSharing")
            .Set("Status", "Granted")
            .Set("ConsentAt", DateTimeOffset.UtcNow);

        await client.UpsertAsync(consent);
        Console.WriteLine("  ? Consent created\n");

        // ???????????????????????????????????????????????????????????
        // QUERY: Find all records with prefix
        // ???????????????????????????????????????????????????????????
        Console.WriteLine("? Querying all consents...");
        
        var consents = await client.QueryByPrefixAsync(tenantId, $"{patientId}-consent-");
        Console.WriteLine($"  ? Found {consents.Count} consent(s)\n");

        // ???????????????????????????????????????????????????????????
        // BATCH: Multiple operations in one request
        // ???????????????????????????????????????????????????????????
        Console.WriteLine("? Adding device via batch...");
        
        var batch = new PartitionBatch(tenantId);
        batch.Upsert(PartitionEntity.Create(tenantId, $"{patientId}-device-dev001")
            .Set("Model", "FitBit Charge 5")
            .Set("Manufacturer", "FitBit"));
        
        await client.SubmitAsync(batch);
        Console.WriteLine("  ? Device added\n");

        // ???????????????????????????????????????????????????????????
        // QUERY ALL: Get everything for this patient
        // ???????????????????????????????????????????????????????????
        Console.WriteLine("? Retrieving all patient data...");
        
        var allData = await client.QueryByPrefixAsync(tenantId, $"{patientId}-");
        Console.WriteLine($"  ? Patient has {allData.Count} total records:\n");
        
        foreach (var row in allData)
        {
            Console.WriteLine($"    • {row.RowKey}");
        }
    }
}
